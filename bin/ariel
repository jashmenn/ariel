#!/usr/bin/env ruby

require 'optparse'
require 'yaml'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: #$0 [mode] [options]"

  opts.on('-m', '--mode=learn|extract') do |mode|
    raise OptionParser::InvalidArgument unless (mode=="extract" or mode=="learn")
    options[:mode]=mode
  end

  opts.on('-d', '--dir=DIRECTORY', 'Directory to look for documents to operate on.') do |dir|
    options[:dir]=dir
  end

  opts.on('-D', '--debug', 'Directory to look for documents to operate on.') do 
    $DEBUG=true
  end

  opts.on('-s', '--structure=STRUCTURE', 'YAML file in which the structure is defined') do |structure|
    options[:structure]=structure
  end
end.parse!

require 'ariel' #After option parsing to debug setting can take effect

case options[:mode]
when "learn"
  structure=YAML.load_file options[:structure]
  files=Dir["#{options[:dir]}/*"].select {|file_name| File.file? file_name}
  Ariel.learn(structure, *files)
  File.open(options[:structure], 'wb') do |file|
    YAML.dump(structure, file)
  end

  # Debugging
  structure.each_descendant do |structure_node|
    puts structure_node.node_name.to_s
    puts structure_node.ruleset.to_yaml
  end

when "extract"
  structure=YAML.load_file options[:structure]
  files=Dir["#{options[:dir]}/*"]
  extractions = Ariel.extract(structure, *files)
  # Do whatever we should do
  #debug
  extractions.each do |extraction| 
    extraction.each_descendant do |node|
      puts "#{node.node_name}: #{node.tokenstream.text}"
    end
    puts
   # puts root_node.to_yaml
  end
end
